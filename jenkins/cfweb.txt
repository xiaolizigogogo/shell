node {
   def antHome
   def jdbc = [jdbc_name: '', jdbc_url: '', jdbc_username: '',jdbc_password: '']
   def env  = [register_url:'',register_namespace:'',service_name:'',image_name:'',image_version:'']
   def jdbcprops 
   def envprops
   def jdbc_name
   def jdbc_url
   def jdbc_username
   def jdbc_password
   def register_url
   def register_namespace
   def service_name
   def image_name
   def image_version
   def dockerHome
   def image
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'git@192.168.1.202:xdweb.git'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      antHome = tool 'ant'
      dockerHome =tool 'docker'
   }
   //build
   stage('Build') {
       dir('./cfc_app/'){
         sh "export JAVA_HOME=/home/zytc/jdk7"
        if (isUnix()) {
            sh "'${antHome}/bin/ant'"
        } else {
            bat(/"${antHome}\bin\ant"/)
        }
        sh 'cp ROOT.war ./assembly/'
        sh 'cp ./assembly/Dockerfile.bak ./assembly/Dockerfile'
       }
   }
   
   stage('docker build'){
        dir('./cfc_app/assembly/'){
          def home = pwd()

          jdbcprops = readProperties defaults: jdbc ,file: "${home}/jdbc.properties"
          envprops = readProperties  defaults: env ,file: "${home}/env.properties"
          echo("${jdbcprops}")
          register_url=envprops['register_url']
          register_namespace=envprops['register_namespace']
          image_name=envprops['image_name']
          image_version=envprops['image_version']
          service_name=envprops['service_name']
          jdbc_name=jdbcprops['jdbc_name']
          jdbc_url=jdbcprops['jdbc_url']
          jdbc_username=jdbcprops['jdbc_username']
          jdbc_password=jdbcprops['jdbc_password']
          image="${register_url}/${register_namespace}/${image_name}:${image_version}"

          sh "docker build -t  ${register_url}/${register_namespace}/${image_name}:${image_version}  --build-arg jdbc_name=${jdbc_name} --build-arg jdbc_username=${jdbc_username} --build-arg jdbc_password=${jdbc_password} --build-arg jdbc_url=${jdbc_url}   ${home}/ "
        
        }
          
    }
   
   stage('docker push'){
       sh "/usr/bin/docker push ${image}"    
   }
   
   stage('Rancher Deploy'){
       rancher confirm: false, credentialId: 'rancher', endpoint: 'http://192.168.1.215:8080/v2-beta', environmentId: '1a7', environments: '', image: "${image}", ports: '', service: "${service_name}", timeout: 50

   }
}